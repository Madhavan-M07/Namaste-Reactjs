Reactjs -- makes your coding experience very fast , optimization etc ...
my-app/
‚îú‚îÄ public/
‚îÇ  ‚îú‚îÄ index.html
‚îÇ  ‚îî‚îÄ assets/        # static files like images, fonts
‚îú‚îÄ src/
‚îÇ  ‚îú‚îÄ assets/        # images, icons, fonts, styles
‚îÇ  ‚îú‚îÄ components/    # reusable UI components
‚îÇ  ‚îú‚îÄ pages/         # page-level components
‚îÇ  ‚îú‚îÄ layouts/       # layout components (headers, footers, sidebars)
‚îÇ  ‚îú‚îÄ routes/        # route definitions
‚îÇ  ‚îú‚îÄ hooks/         # custom React hooks
‚îÇ  ‚îú‚îÄ context/       # React context API providers
‚îÇ  ‚îú‚îÄ services/      # API calls, axios instances, utility services
‚îÇ  ‚îú‚îÄ utils/         # helper functions
‚îÇ  ‚îú‚îÄ store/         # state management (Redux, Zustand, etc.)
‚îÇ  ‚îú‚îÄ styles/        # global styles, themes
‚îÇ  ‚îú‚îÄ App.jsx
‚îÇ  ‚îú‚îÄ main.jsx       # entry point
‚îÇ  ‚îî‚îÄ index.css
‚îú‚îÄ package.json
‚îî‚îÄ vite.config.js / webpack.config.js

2. Recommended Detailed Folder Structure for Scalable Apps

src/
‚îú‚îÄ assets/
‚îÇ  ‚îú‚îÄ images/
‚îÇ  ‚îú‚îÄ icons/
‚îÇ  ‚îî‚îÄ fonts/
‚îú‚îÄ components/
‚îÇ  ‚îú‚îÄ Button/
‚îÇ  ‚îÇ  ‚îú‚îÄ Button.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ Button.module.css
‚îÇ  ‚îú‚îÄ Card/
‚îÇ  ‚îÇ  ‚îú‚îÄ Card.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ Card.module.css
‚îÇ  ‚îî‚îÄ Navbar/
‚îÇ     ‚îú‚îÄ Navbar.jsx
‚îÇ     ‚îî‚îÄ Navbar.module.css
‚îú‚îÄ pages/
‚îÇ  ‚îú‚îÄ Home/
‚îÇ  ‚îÇ  ‚îú‚îÄ Home.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ Home.module.css
‚îÇ  ‚îú‚îÄ About/
‚îÇ  ‚îÇ  ‚îú‚îÄ About.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ About.module.css
‚îÇ  ‚îî‚îÄ Contact/
‚îÇ     ‚îú‚îÄ Contact.jsx
‚îÇ     ‚îî‚îÄ Contact.module.css
‚îú‚îÄ layouts/
‚îÇ  ‚îú‚îÄ MainLayout.jsx
‚îÇ  ‚îî‚îÄ AuthLayout.jsx
‚îú‚îÄ routes/
‚îÇ  ‚îî‚îÄ AppRoutes.jsx
‚îú‚îÄ hooks/
‚îÇ  ‚îú‚îÄ useAuth.jsx
‚îÇ  ‚îî‚îÄ useFetch.jsx
‚îú‚îÄ context/
‚îÇ  ‚îú‚îÄ AuthContext.jsx
‚îÇ  ‚îî‚îÄ ThemeContext.jsx
‚îú‚îÄ services/
‚îÇ  ‚îú‚îÄ api.js
‚îÇ  ‚îî‚îÄ authService.js
‚îú‚îÄ store/
‚îÇ  ‚îú‚îÄ index.js
‚îÇ  ‚îî‚îÄ reducers/
‚îÇ     ‚îú‚îÄ authReducer.js
‚îÇ     ‚îî‚îÄ themeReducer.js
‚îú‚îÄ utils/
‚îÇ  ‚îú‚îÄ validators.js
‚îÇ  ‚îî‚îÄ formatters.js
‚îú‚îÄ styles/
‚îÇ  ‚îú‚îÄ global.css
‚îÇ  ‚îî‚îÄ theme.css
‚îú‚îÄ App.jsx
‚îú‚îÄ main.jsx
‚îî‚îÄ index.css


Parcel + React Folder Structure
my-app/
‚îú‚îÄ public/
‚îÇ  ‚îú‚îÄ index.html          # main HTML file
‚îÇ  ‚îî‚îÄ assets/             # static files like images, fonts
‚îú‚îÄ src/
‚îÇ  ‚îú‚îÄ assets/
‚îÇ  ‚îÇ  ‚îú‚îÄ images/
‚îÇ  ‚îÇ  ‚îú‚îÄ icons/
‚îÇ  ‚îÇ  ‚îî‚îÄ fonts/
‚îÇ  ‚îú‚îÄ components/
‚îÇ  ‚îÇ  ‚îú‚îÄ Button/
‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ Button.jsx
‚îÇ  ‚îÇ  ‚îÇ  ‚îî‚îÄ Button.module.css
‚îÇ  ‚îÇ  ‚îî‚îÄ Navbar/
‚îÇ  ‚îÇ     ‚îú‚îÄ Navbar.jsx
‚îÇ  ‚îÇ     ‚îî‚îÄ Navbar.module.css
‚îÇ  ‚îú‚îÄ pages/
‚îÇ  ‚îÇ  ‚îú‚îÄ Home/
‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ Home.jsx
‚îÇ  ‚îÇ  ‚îÇ  ‚îî‚îÄ Home.module.css
‚îÇ  ‚îÇ  ‚îî‚îÄ About/
‚îÇ  ‚îÇ     ‚îú‚îÄ About.jsx
‚îÇ  ‚îÇ     ‚îî‚îÄ About.module.css
‚îÇ  ‚îú‚îÄ layouts/
‚îÇ  ‚îÇ  ‚îú‚îÄ MainLayout.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ AuthLayout.jsx
‚îÇ  ‚îú‚îÄ routes/
‚îÇ  ‚îÇ  ‚îî‚îÄ AppRoutes.jsx
‚îÇ  ‚îú‚îÄ hooks/
‚îÇ  ‚îÇ  ‚îú‚îÄ useAuth.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ useFetch.jsx
‚îÇ  ‚îú‚îÄ context/
‚îÇ  ‚îÇ  ‚îú‚îÄ AuthContext.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ ThemeContext.jsx
‚îÇ  ‚îú‚îÄ services/
‚îÇ  ‚îÇ  ‚îú‚îÄ api.js
‚îÇ  ‚îÇ  ‚îî‚îÄ authService.js
‚îÇ  ‚îú‚îÄ store/
‚îÇ  ‚îÇ  ‚îú‚îÄ index.js
‚îÇ  ‚îÇ  ‚îî‚îÄ reducers/
‚îÇ  ‚îÇ     ‚îú‚îÄ authReducer.js
‚îÇ  ‚îÇ     ‚îî‚îÄ themeReducer.js
‚îÇ  ‚îú‚îÄ utils/
‚îÇ  ‚îÇ  ‚îú‚îÄ validators.js
‚îÇ  ‚îÇ  ‚îî‚îÄ formatters.js
‚îÇ  ‚îú‚îÄ styles/
‚îÇ  ‚îÇ  ‚îú‚îÄ global.css
‚îÇ  ‚îÇ  ‚îî‚îÄ theme.css
‚îÇ  ‚îú‚îÄ App.jsx
‚îÇ  ‚îî‚îÄ index.jsx            # entry point for Parcel
‚îú‚îÄ package.json
‚îî‚îÄ .parcelrc               # optional custom config



Two types of export in React :

1. One way is Module defualt export .

if a file want to export multiple data in a single files ..Then you can use named export ..Keep the name infront of the export . 

Always it is a Good Practice Keep the the compontent file not more than 100 lines of code .. if it is exceed ..you aren doing something wrong .Make it simple. Even Akshay at Uber uses the code as same 

1. when i use filter logic...and console.log it ..the data is filtered and UI didnt modified it .

Hooks : 

import ResCard from "./Restaurant"
import resList from "../utils/mockdata"
const Body = () => {

    let listOfRestaurant = [{
        name:"McDonald's",
        cuisines:["Burgers","American"],
        avgRating:3.2,
       "cloudinaryImage": "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg"
    },
     {
        name:"KFC",
        cuisines:["Burgers","American"],
        avgRating:4.5,
       "cloudinaryImage": "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg"
    },
        {
        name:"Burger King",
        cuisines:["Burgers","American"],
        avgRating:4.1,
       "cloudinaryImage": "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg"
    }
];

  return (
    <div className="body">
      <div className="filter" style={{ padding: "10px", margin: "10px" }}>

        <button className="filter-btn"
         onClick={()=>
         {
            //Filter Logic
            listOfRestaurant=listOfRestaurant.filter((res)=>res.avgRating>4);
            console.log(listOfRestaurant);
         }}>
         Top Rated Restaurant</button>
      </div>

      <div className="res-container">
        {listOfRestaurant.map((res) => (
          <ResCard key={res.name} resData={res} />
        ))}
      </div>
    </div>

  )

}

export default Body

when i clicked the btn ..of highest rating restaurant ..the ui stills the same but in console it filters and gives only 2 restaurants is there .. but why the UI is not changed ?

React is fast in DOM Manipulation . Virtual DOM , RECONILIATION.

The Data and UI layer tied with each layer in sync .

when i click the btn ..why my UI is not changing ..but in console it shows ...2 filters data ...in javascript how to update the Ui and react how it happens :
Good question üëç You‚Äôve hit the most important difference between normal JavaScript and React. Let‚Äôs break it down:
üü¢ What‚Äôs happening in your code

listOfRestaurant is just a local variable inside your Body function.

When you click the button, you‚Äôre doing:

listOfRestaurant = listOfRestaurant.filter((res) => res.avgRating > 4);
console.log(listOfRestaurant);


‚úÖ This updates the variable in JavaScript memory.
‚ùå But React doesn‚Äôt ‚Äúknow‚Äù about this change, so it won‚Äôt re-render the component.

That‚Äôs why the console shows filtered data, but the UI doesn‚Äôt change.
üü¢ Why React behaves differently

In React:

The UI is declarative. React looks at state/props, and renders the UI based on that.

If you change plain variables, React doesn‚Äôt track them ‚Üí no re-render.

If you change state variables (via useState), React knows something changed ‚Üí triggers a re-render.

So, to make your UI update, you must use useState.

import { useState } from "react";
import ResCard from "./Restaurant";

const Body = () => {
  // Store restaurants in state
  const [listOfRestaurant, setListOfRestaurant] = useState([
    {
      name: "McDonald's",
      cuisines: ["Burgers", "American"],
      avgRating: 3.2,
      cloudinaryImage:
        "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg",
    },
    {
      name: "KFC",
      cuisines: ["Burgers", "American"],
      avgRating: 4.5,
      cloudinaryImage:
        "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg",
    },
    {
      name: "Burger King",
      cuisines: ["Burgers", "American"],
      avgRating: 4.1,
      cloudinaryImage:
        "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/RX_THUMBNAIL/IMAGES/VENDOR/2025/4/1/5ad8c46b-d761-46de-b9c0-3578bfbf4c02_708843.jpg",
    },
  ]);

  return (
    <div className="body">
      <div className="filter" style={{ padding: "10px", margin: "10px" }}>
        <button
          className="filter-btn"
          onClick={() => {
            // Update state instead of reassigning variable
            const filteredList = listOfRestaurant.filter(
              (res) => res.avgRating > 4
            );
            setListOfRestaurant(filteredList);
          }}
        >
          Top Rated Restaurant
        </button>
      </div>

      <div className="res-container">
        {listOfRestaurant.map((res) => (
          <ResCard key={res.name} resData={res} />
        ))}
      </div>
    </div>
  );
};

export default Body;
üü¢ Key Concept:

In JavaScript (plain) ‚Üí changing a variable updates data in memory.

In React ‚Üí UI re-renders only when state or props change.

So:

listOfRestaurant = ... ‚Üí won‚Äôt re-render ‚ùå

setListOfRestaurant(...) ‚Üí triggers React re-render ‚úÖ

ok understand ..im asking about javascript ..how ui gets re-rendered ...alternative of useState in js ..

Got it üëå You want to understand this at the JavaScript (without React) level first, and then see how React builds on top of that. Let‚Äôs go step by step.

üü¢ In plain JavaScript

There is no automatic re-render.
If you change a variable in JS, the browser doesn‚Äôt magically update the UI. You have to manually tell the DOM what changed.

<div id="list"></div>
<button id="btn">Filter Top Rated</button>

<script>
  let restaurants = [
    { name: "McDonald's", rating: 3.2 },
    { name: "KFC", rating: 4.5 },
    { name: "Burger King", rating: 4.1 }
  ];

  function renderUI() {
    const listDiv = document.getElementById("list");
    listDiv.innerHTML = ""; // clear old content

    restaurants.forEach(res => {
      const item = document.createElement("p");
      item.textContent = `${res.name} - ${res.rating}`;
      listDiv.appendChild(item);
    });
  }

  // initial render
  renderUI();

  document.getElementById("btn").addEventListener("click", () => {
    restaurants = restaurants.filter(res => res.rating > 4);
    renderUI(); // üîë manually re-render UI
  });
</script>
Key point in JS:

You change the data (restaurants = restaurants.filter(...)).

You manually re-run a renderUI() function to update the DOM.

Without this, the page won‚Äôt change, even if the variable changes
üü¢ In React

React automates that manual work:

useState holds your data.

When you call setState (e.g., setRestaurants(filtered)), React:

Updates the variable (like JS does).

Calls its internal renderUI() (reconciliation + virtual DOM diffing).

Updates only the changed parts of the real DOM.

So React = JavaScript + a smart renderUI system that runs automatically when state/props change.
Here, you don‚Äôt manually call renderUI() ‚Äî the proxy automatically triggers when data changes.
This is similar to what frameworks like Vue/React do under the hood.

‚úÖ Summary:

In plain JS, you must manually re-render the DOM after updating data.

In React, useState + Virtual DOM does that automatically.

Alternative in JS ‚Üí write a custom renderUI() or use Proxy/observer pattern to simulate useState.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Whenever the state variable changes ..react re-renders the Component .=> whenever my state variable updates ..react re-renders the component .
React Hook - normal js function for ulitiy gives you powerful state variable .

React is Good at - DOM Operation .tal
changed my state variable => it keep the data variable ..sync with ui variable .

Now , there comes => a virtual DOM .

REACT USES => ( Reconciliation Algorithm is also known as React Fibre ) . On the UI .
1. we have DOM ITS A TREE .

res - container => 15 rest - card 

There are 7 resto card => suppose UI CHANGES FROM FILTERTING IN TO 3 FILTERED CARDS .

virtual DOM is a representation of Actual DOM . VIRTUAL DOM => IS AN OBJECT .

DIFF ALGORITHM : IT FINDSOUT THE UPDATED ALGORITHM AND A OLD DOM .
DIFF BETWEEN OLD VIRTUAL DOM AND CLICK THE NEW UPDATED VDOM => TRY OUT THE DIFFERNECE BETWEN O.VDOM AND N.VIRTUALDOM . ON EVERY RENDER CYCLE .

use state is array destructing .

const arr = useState(resList);
const[listOfRestaurants , setListOfRestraunt] = arr;  // this also  works;
const listofRestaurants = arr[0];
const setListofRestuarants = arr[1];

This is a useState management . please ask how what where . 


